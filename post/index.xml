<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on Ruichen Ni&#39;s Blog</title>
    <link>https://thueishin.github.io/post/</link>
    <description>Recent content in Articles on Ruichen Ni&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 14 Jun 2025 20:25:12 +0800</lastBuildDate>
    <atom:link href="https://thueishin.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>文本函数解析树算法</title>
      <link>https://thueishin.github.io/post/%E6%96%87%E6%9C%AC%E5%87%BD%E6%95%B0%E8%A7%A3%E6%9E%90%E6%A0%91%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 14 Jun 2025 20:25:12 +0800</pubDate>
      <guid>https://thueishin.github.io/post/%E6%96%87%E6%9C%AC%E5%87%BD%E6%95%B0%E8%A7%A3%E6%9E%90%E6%A0%91%E7%AE%97%E6%B3%95/</guid>
      <description>这是我博士课题中的一个小算法，用于解析形如 \( f(X,Y,Z) \) 以空间坐标为变量的文本函数并进行表达式计算。当时的目的是为了能够统一地设置流场的初始状态，由于流场的初始状态的界面往往可以通过解析函数来表示，因此设计了以空间坐标 \( (X,Y,Z) \) 为变量的函数表达式解析。通过文本函数解析避免了初始状态文件的导出，并且在后续做多相流的时候还可以拿来计算相应的初始体积分数。</description>
    </item>
    <item>
      <title>移动构造函数（浅拷贝）和具名返回值优化(NRVO)</title>
      <link>https://thueishin.github.io/post/%E7%A7%BB%E5%8A%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E5%85%B7%E5%90%8D%E8%BF%94%E5%9B%9E%E5%80%BC%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sat, 14 Jun 2025 14:24:13 +0800</pubDate>
      <guid>https://thueishin.github.io/post/%E7%A7%BB%E5%8A%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E5%85%B7%E5%90%8D%E8%BF%94%E5%9B%9E%E5%80%BC%E4%BC%98%E5%8C%96/</guid>
      <description>针对数据量特别大的对象实例，运算过程中都要特别关注对其的拷贝操作，例如大型矩阵的乘法运算\(A_{r \times s}\cdot B_{s \times t}\) 等等。出于代码的复用性考虑，我们会将这些运算封装成函数调用。在C++新标准前，通常的做法是将对象实例通过形参列表将引用或者指针传入以避免大数据的拷贝操作，在C++17新标准之后，我们可以采用C++编译器的具名返回值优化(NRVO)功能，并搭配浅拷贝的移动构造函数来避免大数据的拷贝操作。</description>
    </item>
    <item>
      <title>Marriage Certificate</title>
      <link>https://thueishin.github.io/post/marriage-certificate/</link>
      <pubDate>Wed, 21 May 2025 13:14:52 +0800</pubDate>
      <guid>https://thueishin.github.io/post/marriage-certificate/</guid>
      <description>Congratulations to ourself for marriage certificate!</description>
    </item>
    <item>
      <title>模板函数返回类型推断</title>
      <link>https://thueishin.github.io/post/%E6%A8%A1%E6%9D%BF%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD/</link>
      <pubDate>Wed, 23 Oct 2024 11:13:00 +0800</pubDate>
      <guid>https://thueishin.github.io/post/%E6%A8%A1%E6%9D%BF%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD/</guid>
      <description>结合C++11的新特性&lt;code&gt;auto&lt;/code&gt;和&lt;code&gt;decltype&lt;/code&gt;对模板函数的返回类型进行推断，增加了泛型编程的灵活性。</description>
    </item>
    <item>
      <title>自动注册机制的工厂模式</title>
      <link>https://thueishin.github.io/post/%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%86%8C%E6%9C%BA%E5%88%B6%E7%9A%84%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 05 Aug 2024 13:53:42 +0800</pubDate>
      <guid>https://thueishin.github.io/post/%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%86%8C%E6%9C%BA%E5%88%B6%E7%9A%84%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
      <description>通过自动注册机制搭配工厂模式以消除初始化子类时的&lt;code&gt;if-else&lt;/code&gt;语句（或&lt;code&gt;switch-case&lt;/code&gt;语句），能够大幅简化代码的撰写。</description>
    </item>
    <item>
      <title>基于YOLO LITE的人脸口罩检测</title>
      <link>https://thueishin.github.io/post/%E5%9F%BA%E4%BA%8Eyolo-lite%E7%9A%84%E4%BA%BA%E8%84%B8%E5%8F%A3%E7%BD%A9%E6%A3%80%E6%B5%8B/</link>
      <pubDate>Mon, 29 Jun 2020 17:09:35 +0800</pubDate>
      <guid>https://thueishin.github.io/post/%E5%9F%BA%E4%BA%8Eyolo-lite%E7%9A%84%E4%BA%BA%E8%84%B8%E5%8F%A3%E7%BD%A9%E6%A3%80%E6%B5%8B/</guid>
      <description>模式识别课程的期末大作业，对图片内的人脸进行检测定位，并判断是否佩戴口罩。在个人电脑上对YOLO-LITE模型从随机初始化开始训练，最终得到的模型性能结果为mAP@.5约为15%，CPU推断速度为29FPS。</description>
    </item>
  </channel>
</rss>
